PROCEDURE ZAKLAD;
BEGIN
#A
PORTA EQU 54016
PORTCNTL EQU 54018

BAJT DB 0
DOBA2 DB 128

KROK LDA BAJT
  STA PORTA
  AND #253
  STA PORTA
  ORA #254
  STA PORTA
  STA BAJT
  RTS

PAUZA2 TYA
  PHA
  LDY DOBA2
PAU2 DEY
  BNE PAU2
  PLA
  TAY
  RTS

VODOR LDA BAJT
  AND #251
VODOR1 STA BAJT
  RTS

VERT LDA BAJT
  ORA #4
  BNE VODOR1

VLENA LDA BAJT
  AND #247
VLENA1 STA BAJT
  RTS

VPRDOL LDA BAJT
  ORA #8
  BNE VLENA1
#
END;

PROCEDURE OPENXY;
BEGIN
#A
  LDA #56
  STA PORTCNTL
  LDA #255
  STA PORTA
  LDA #60
  STA PORTCNTL
  LDA #254
  STA PORTA
  STA BAJT
#
END;

PROCEDURE CLOSEXY;
BEGIN
#A
  LDA #56
  STA PORTCNTL
  LDA #0
  STA PORTA
  LDA #60
  STA PORTCNTL
#
END;

PROCEDURE PU;
BEGIN
#A
  LDA BAJT
  AND #254
  STA BAJT
  STA PORTA
  JSR PAUZA2
#
END;

PROCEDURE PD;
BEGIN
#A
  LDA BAJT
  ORA #1
  STA BAJT
  STA PORTA
  JSR PAUZA2
#
END;

PROCEDURE VPRED;
BEGIN
#A
  JSR VERT
  JSR VLENA
  JSR KROK
#
POSY:=POSY+1;
END;

PROCEDURE VZAD;
BEGIN
#A
  JSR VERT
  JSR VPRDOL
  JSR KROK
#
POSY:=POSY-1;
END;

PROCEDURE VLEVO;
BEGIN
#A
  JSR VODOR
  JSR VLENA
  JSR KROK
#
POSX:=POSX-1;
END;

PROCEDURE VPRAVO;
BEGIN
#A
  JSR VODOR
  JSR VPRDOL
  JSR KROK
#
POSX:=POSX+1;
END;

PROCEDURE HORIZ(DXX:REAL);
BEGIN
IF DXX<>0 THEN
 BEGIN
  IF DXX>0 THEN
   VPRAVO
  ELSE
   VLEVO;
 END
END;

PROCEDURE SVISLE(DYY:REAL);
BEGIN
IF DYY<>0 THEN
 BEGIN
  IF DYY>0 THEN
   VPRED
  ELSE
   VZAD;
 END
END;

PROCEDURE MR(DX,DY:REAL);
VAR DXX,DYY,K,Y,YP:REAL;

 PROCEDURE POM1;
 VAR X:INTEGER;
 BEGIN
  K:=DX/DY;YP:=0;X:=1;
  REPEAT
   Y:=K*X;SVISLE(DYY);X:=X+1;
   IF (Y-YP)>0.5 THEN
   BEGIN
    HORIZ(DXX);YP:=YP+1;
   END;
  UNTIL X>DY;
 END;
 
 PROCEDURE POM2;
 VAR X:INTEGER;
 BEGIN
  K:=DY/DX;YP:=0;X:=1;
  REPEAT
   Y:=K*X;HORIZ(DXX);X:=X+1;
   IF (Y-YP)>0.5 THEN
   BEGIN
    SVISLE(DYY);YP:=YP+1;
   END;
  UNTIL X>DX;
 END;

BEGIN
 DXX:=DX;DYY:=DY;
 DX:=ABS(DX);DY:=ABS(DY);
 DX:=ROUND(DX);DY:=ROUND(DY);
 IF DY>DX THEN
  POM1
 ELSE
  POM2
END;

PROCEDURE SETPOS(XX,YY:REAL);
VAR DX,DY:REAL;
BEGIN
 DX:=ABS(XX-POSX);
 DY:=ABS(YY-POSY);
 IF XX<POSX THEN
 BEGIN
  DX:=-DX;
 END;
 IF YY<POSY THEN
 BEGIN
  DY:=-DY;
 END;
 MR(DX,DY);
END;

PROCEDURE HOME;
BEGIN
 SETPOS(0,0);
END;

PROCEDURE CS;
VAR I:INTEGER;
BEGIN
 OPENXY;
 PU;
 FOR I:=1 TO 2000 DO
 BEGIN
  VLEVO;
 END;
 MR(900,-1300);
 POSX:=0;
 POSY:=0;
 UHEL:=0;
END;

PROCEDURE FD(DALKA:REAL);
VAR DX,DY:REAL;
BEGIN
 DX:=DALKA*SIN(UHEL);
 DY:=DALKA*COS(UHEL);
 MR(DX,DY);
END;

PROCEDURE BK(DALKA:REAL);
BEGIN
 FD(-DALKA);
END;

FUNCTION DEGRAD(ALFA:REAL):REAL;
BEGIN
 DEGRAD:=(ALFA*PI)/180;
END;

FUNCTION RADDEG(ALFA:REAL):REAL;
BEGIN
 RADDEG:=(ALFA*180)/PI;
END;

FUNCTION HEADING:REAL;
BEGIN
 HEADING:=RADDEG(UHEL);
END;

PROCEDURE SETH(ALFA:REAL);
BEGIN
 UHEL:=DEGRAD(ALFA);
END;

PROCEDURE LT(ALFA:REAL);
BEGIN
 UHEL:=UHEL-DEGRAD(ALFA);
END;

PROCEDURE RT(ALFA:REAL);
BEGIN
 UHEL:=UHEL+DEGRAD(ALFA);
END;
